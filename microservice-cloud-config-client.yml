spring: 
  profiles: 
    active: 
    - dev
---
server: 
  port: 8201
spring: 
  profiles: dev
  application: 
    name: microservice-cloud-config-client
eureka:
  client: 
    service-url: 
      defaultZone: http://127.0.0.1:7002/eureka/
---
server:
  port: 7001
spring:
  profiles: 7001
  application:
    name: eureka-server-7001
eureka:
  instance:
    hostname: localhost  # Eureka服务端实例名
    instance-id:  eureka-server-7001 # 自定义服务名称信息
    prefer-ip-address: true # 访问路径可以显示ip信息
  client:
    #registerWithEureka: false  # 实例是否在eureka服务器上注册自己的信息以供其他服务发现（默认为true）
    #fetchRegistry: false  # 此客户端是否获取eureka服务器注册表上的注册信息（默认为true,）
    serviceUrl:
      # 与Eureka注册服务中心的通信zone和url地址,用于查询服务和注册服务
      defaultZone:  http://127.0.0.1:7002/eureka/
  # 在开发环境时关闭服务心跳检测提示，在生产环境需要改为True
  server:
    enable-self-preservation: false
---
server:
  port: 7002

eureka:
  instance:
    hostname: localhost  # Eureka服务端实例名
    instance-id:  eureka-server-7002 # 自定义服务名称信息
    prefer-ip-address: true # 访问路径可以显示ip信息
    lease-renewal-interval-in-seconds: 5 #向注册中心注册服务id的间隔
    lease-expiration-duration-in-seconds: 10 #续约到期时间
  client:
    #registerWithEureka: false  # 实例是否在eureka服务器上注册自己的信息以供其他服务发现（默认为true）
    #fetchRegistry: false  # 此客户端是否获取eureka服务器注册表上的注册信息（默认为true,）
    serviceUrl:
      # 与Eureka注册服务中心的通信zone和url地址,用于查询服务和注册服务
      defaultZone:  http://127.0.0.1:7001/eureka/
  # 在开发环境时关闭服务心跳检测提示，在生产环境需要改为True
  server:
    enable-self-preservation: false
spring:
  profiles: 7002
  application:
    name: eureka-server-7002
---
server:
  port: 9004

zuul:
  routes:
    xiedan.path: /visit/**
    xiedan.serviceId: microservice-provider
  ignored-services: '*'
  prefix: /hello

spring:
  profiles: 9004
  application:
    name: microservice-cloud-zuul-geteway-9004

# eureka配置
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:7001/eureka/
  instance:
    instance-id: microservice-cloud-zuul-geteway-9004 # 自定义服务名称信息
    prefer-ip-address: true # 访问路径可以显示ip信息

info:
  app.name: microservice-cloud30
  company.name: www.thinkifu.com
  build.artifactId: $project.artifactId$ # 不显示，后面再去解决它
  build.version: $project.version$ # 不显示，后面再去解决它

---
server:
  port: 9001

eureka:
  client:
    registerWithEureka: false #不注册到服务中心
    serviceUrl:
      defaultZone: http://localhost:7001/eureka/
  instance:
    instance-id: microservice-consumer-goods # 自定义服务名称信息
    prefer-ip-address: true
feign:
  hystrix:
    enabled: true
#thymeleaf配置
spring:
  profiles: 9001
  application:
    name: microservice-consumer-goods
  main:
    allow-bean-definition-overriding: true
  thymeleaf:
    #开发配置为false,避免修改模板后要重启服务器，才能看到实时效果
    cache: false
    #在呈现模板之前检查模板是否存在
    check-template: true
    #检查模板位置是否存在
    check-template-location: true
    #应用于模板的模板模式
    mode: HTML5
    #字符编码
    encoding: utf-8
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
---
server:
  port: 8001

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:7001/eureka/ #,http://localhost:7002/eureka/
  instance:
    instance-id: microservice-provider-8001 # 自定义服务名称信息
    prefer-ip-address: true
info:
  app.name: microservice-provider-8001
  company.name: www.thinkifu.com
  build.artifactId: $project.artifactId$
  build.version: $project.version$
  
spring:
  profiles: 8001
    #active: dev
  application:
    name: microservice-provider  # 指明微服务应用名，这个很重要，这在以后的服务与服务之间相互调用一般都是根据这个name。
  thymeleaf:
    #开发配置为false,避免修改模板后要重启服务器，才能看到实时效果
    cache: false
    #在呈现模板之前检查模板是否存在
    check-template: true
    #检查模板位置是否存在
    check-template-location: true
    #应用于模板的模板模式
    mode: HTML5
    #字符编码
    encoding: utf-8
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      driver-class-name: com.mysql.cj.jdbc.Driver
      url:  jdbc:mysql://localhost:3306/practice?useUnicode=true&characterEncoding=utf8&useSSL=true&serverTimezone=UTC
      username: root
      password: SIMAI666888
      #初始化大小，最小，最大
      initial-size: 5
      min-idle: 5
      max-active: 20
      #连接等待超时时间
      max-wait: 30000
      #配置检测可以关闭的空闲连接间隔时间
      time-between-eviction-runs-millis: 60000
      #配置连接在池中的最小生存时间
      min-evictable-idle-time-millis: 300000
      #用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
      validation-query: select 'X'
      #申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      test-while-idle: true
      #归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      test-on-borrow: false
      #建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-on-return: false
      #是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
      pool-prepared-statements: false
      max-open-prepared-statements: 20
      #要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
      max-pool-prepared-statement-per-connection-size: 20
      #Spring监控AOP切入点，如x.y.z.service.*,配置多个英文逗号分隔
      aop-patterns: com.thinkifu.xiedan.servie.*
      #合并多个DruidDataSource的监控数据
      use-global-data-source-stat: true
      #配置监控统计拦截的filters
      filter:
        #监控统计用的filter:stat
        stat:
          enabled: true
          merge-sql: true
          log-slow-sql: true
          #配置SQL慢的标准，执行时间超过slowSqlMillis的就是慢
          slow-sql-millis: 5000
        #防御sql注入的filter:wall
        wall:
          enabled: true
          config:
            #是否允许执行DELETE语句
            delete-allow: true
            #是否允许修改表
            drop-table-allow: true
        slf4j:
          enabled: false
          statement-executable-sql-log-enable: true
          #所有Statement相关的日志
          statement-log-enabled: true
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
  
logging:
  config: classpath:logback-spring.xml
  level:
    com.thinkifu.xiedan.mapper: debug

mybatis:
  mapper-locations: classpath:mybatis/mappers/*Mapper.xml
  type-aliases-package: com.thinkifu.xiedan.entity
---
server:
  port: 8002

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:7001/eureka/ #,http://localhost:7002/eureka/
  instance:
    instance-id: microservice-provider-8002 # 自定义服务名称信息
    prefer-ip-address: true
info:
  app.name: microservice-provider-8002
  company.name: www.thinkifu.com
  build.artifactId: ${project.artifactId}
  build.version: ${project.version}

spring:
  profiles: 8002
    #active: dev
  application:
    name: microservice-provider  # 指明微服务应用名，这个很重要，这在以后的服务与服务之间相互调用一般都是根据这个name。
  thymeleaf:
    #开发配置为false,避免修改模板后要重启服务器，才能看到实时效果
    cache: false
    #在呈现模板之前检查模板是否存在
    check-template: true
    #检查模板位置是否存在
    check-template-location: true
    #应用于模板的模板模式
    mode: HTML5
    #字符编码
    encoding: utf-8
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      driver-class-name: com.mysql.cj.jdbc.Driver
      url:  jdbc:mysql://localhost:3306/practice?useUnicode=true&characterEncoding=utf8&useSSL=true&serverTimezone=UTC
      #jdbc:mysql://localhost:3306/practice?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      username: root
      password: SIMAI666888
      #初始化大小，最小，最大
      initial-size: 5
      min-idle: 5
      max-active: 20
      #连接等待超时时间
      max-wait: 30000
      #配置检测可以关闭的空闲连接间隔时间
      time-between-eviction-runs-millis: 60000
      #配置连接在池中的最小生存时间
      min-evictable-idle-time-millis: 300000
      #用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
      validation-query: select 'X'
      #申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      test-while-idle: true
      #归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      test-on-borrow: false
      #建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-on-return: false
      #是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
      pool-prepared-statements: false
      max-open-prepared-statements: 20
      #要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
      max-pool-prepared-statement-per-connection-size: 20
      #Spring监控AOP切入点，如x.y.z.service.*,配置多个英文逗号分隔
      aop-patterns: com.thinkifu.xiedan.servie.*
      #合并多个DruidDataSource的监控数据
      use-global-data-source-stat: true
      #配置监控统计拦截的filters
      filter:
        #监控统计用的filter:stat
        stat:
          enabled: true
          merge-sql: true
          log-slow-sql: true
          #配置SQL慢的标准，执行时间超过slowSqlMillis的就是慢
          slow-sql-millis: 5000
        #防御sql注入的filter:wall
        wall:
          enabled: true
          config:
            #是否允许执行DELETE语句
            delete-allow: true
            #是否允许修改表
            drop-table-allow: true
        slf4j:
          enabled: false
          statement-executable-sql-log-enable: true
          #所有Statement相关的日志
          statement-log-enabled: true
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
logging:
  config: classpath:logback-spring.xml
  level:
    com.thinkifu.xiedan.mapper: debug
  
mybatis:
  mapper-locations: classpath:mybatis/mappers/*Mapper.xml
  type-aliases-package: com.thinkifu.xiedan.entity
---

